@startuml
skinparam componentStyle rectangle
skinparam node {
  BackgroundColor<<Frontend>> #FDF6E3
  BackgroundColor<<Backend>> #F5F5F5
  BackgroundColor<<Database>> #EFEFEF
}

' Cliente
node "Cliente" {
  [Navegador Web] as browser
  [Frontend Svelte] as SvelteApp
  browser --> SvelteApp
}

' Servidor Web
node "Servidor Web (Cloud)" {

  ' Frontend
  component "Frontend\nExpressJs + Svelte" <<Frontend>> as frontend

  ' Backend: Microservicios
  node "Microservicios Backend" {
    component "MS Accesos\nGo Gin" <<Backend>> as accessService
    component "MS Archivos" <<Backend>> as fileService
    component "MS Classroom" <<Backend>> as classroomService
    component "MS Mensajería" <<Backend>> as messagesService
    component "MS Calendario" <<Backend>> as calendarService
  }

  ' Bases de datos
  node "Bases de Datos" {
    database "DB Accesos\nSqlite3" <<Database>> as accessDB
    database "DB Classroom" <<Database>> as classroomDB
  }
}

' Relación Cliente -> Frontend
frontend --> browser : Entrega HTML/CSS/JS + Tokens

' Frontend llama a microservicios (JWT Auth)
frontend --> accessService : API JWT
frontend --> fileService : API JWT
frontend --> classroomService : API JWT
frontend --> messagesService : API JWT
frontend --> calendarService : API JWT

' Microservicios se conectan a DB si corresponde
accessService --> accessDB : ORM / SQL
classroomService --> classroomDB : ORM / SQL

' Microservicios exponen API Reset a SvelteApp
SvelteApp --> accessService : http://localhost:5000
SvelteApp --> fileService : http://localhost:3000
SvelteApp --> classroomService : http://localhost:9292
SvelteApp --> messagesService : http://localhost:4000
SvelteApp --> calendarService : http://localhost:3000

@enduml
